import Head from 'next/head'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import { useRef } from 'react'
import { useRouter } from 'next/router'
import { useEffect, useState } from 'react'
import socket from '../src/socket'
import Indicator from '@/src/indicator'

const inter = Inter({ subsets: ['latin'] })

const Home = () => {
  const buttonRef = useRef(null)
  const selectRef = useRef(null)
  const router = useRouter()
  const { push } = useRouter()

  // Get any query parameters
  const { serviceId, livestreaming } = router.query

  const [livestream, setLivestream] = useState(false);

  const LANGUAGES = process.env.NEXT_PUBLIC_LANGUAGES.split(',')
  const hearbeat = `${serviceId}:heartbeat`;

  useEffect(() => {
    // Need to check if the router is ready before trying to get the serviceId
    // from the query parameter.
    if (router.isReady) {
      // If livestream is already active when we returned to this page
      if (livestreaming) {
        setLivestream(true);
      }
      socketInitializer(), []
    }
  }, [router.isReady])

  useEffect(() => {
    console.log(`Livestream is now: ${livestream}`);
  }, [livestream])


  const socketInitializer = () => {
    socket.on('connect', () => {
      console.log('connected to the socket')

      // register for the transcript heartbeats
      console.log(`Registering for service: ${serviceId}`);
      socket.emit('register', serviceId);
    })

    socket.on('disconnect', () => {
      console.log('disconnected from the socket')
    })
  }

  const handleClick = async (e) => {
    if (selectRef.current.value == "") {
      alert("No language is selected")
    } else {
      console.log(`Selected language: ${selectRef.current.value}`)
      await push(`/translate?serviceId=${serviceId}&language=${selectRef.current.value}&livestreaming=${livestream}`)
    }
  }

  // Callback for when the Indicator component changes
  const handleIndicatorChanged = (status) => {
      setLivestream(status);  
  }

  return (
    <>
      <Head>
        <title>DeBabel Translation App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="preconnect" href="https://fonts.googleapis.com" />
      </Head>
      <div className={styles.home}>
        {/* <h1>Debabel</h1> */}
        <div className={styles.logo}>
          <img src='/logo.png' />
          <Indicator socket={socket} onLightChanged={handleIndicatorChanged}/>
        </div>
        <div className={styles.inputBox}>
          <img src='/NEFC.png' />
          <div className={styles.input}>
            <label>Please select your language</label>
            <select ref={selectRef}>
              {LANGUAGES.map((option, index) => {
                // Alternate between locale and language name
                const locale = LANGUAGES[index * 2]
                const language = LANGUAGES[index * 2 + 1]
                if (locale && language) {

                  return (
                    <option key={locale} value={locale}>{language}</option>
                  )
                }
              })}
            </select>
          </div>
          <div ref={buttonRef} onClick={handleClick} className={styles.translateButton}>
            {/* <a href='/translate'> */}
            TRANSLATE
            {/* </a> */}
          </div>
        </div>
      </div>
    </>
  )
}

export default Home;
